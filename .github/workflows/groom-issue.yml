name: Groom

on:
  workflow_dispatch:
    inputs:
      LIMIT_CHECK:
        default: 1000
        type: number
        description: How many issues to check.
      LIMIT_FAIL:
        default: 25
        type: number
        description: Stop after how many failures?
      LIMIT_FIX:
        default: 25
        type: number
        description: How many issues to auto-fix.
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  issues:
    permissions:
      contents: none
      issues: write
      pull-requests: write
      repository-projects: write
    runs-on: ubuntu-24.04
    steps:
      - env:
          LIMIT_CHECK: ${{ inputs.LIMIT_CHECK || '1000' }}
          LIMIT_FAIL: ${{ inputs.LIMIT_FAIL || '25' }}
          LIMIT_FIX: ${{ inputs.LIMIT_FIX || '25' }}
        name: Run Script
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |
            const LIMIT_CHECK = process.env.LIMIT_CHECK ? Number( process.env.LIMIT_CHECK ) : 1000;
            const LIMIT_FAIL = process.env.LIMIT_FAIL ? Number( process.env.LIMIT_FAIL ) : 25;
            const LIMIT_FIX = process.env.LIMIT_FIX ? Number( process.env.LIMIT_FIX ) : 25;
            let COUNT_SEEN = 0;

            const milestones = ( await github.rest.issues.listMilestones( {
              owner: context.repo.owner,
              repo: context.repo.repo,
              sort: "due_on",
              state: "all",
              direction: "asc",
            } ) ).data;
            const currentMilestone = milestones[ milestones.length - 2 ];
            const findMilestone = date => {
              const index = milestones.findLastIndex( _ => ( new Date( _.due_on ).valueOf() + 4.68e+7 ) < date.valueOf() ) + 1;
              return milestones[ index ];
            }
            core.debug( milestones );

            const reportIssueInvalid = ( issue, warnings ) => {
              core.summary.addList( warnings.map( _ => `:warning: ${_}` ) );
              core.summary.addList([
                `Created at: ${ new Date( issue.created_at ).toISOString() }`,
                `Updated at: ${ issue.updated_at ? new Date( issue.updated_at ).toISOString() : "never" }`,
                `Closed  at: ${ issue.closed_at ? new Date( issue.closed_at ).toISOString() : "never" }`
              ]);
            };

            const reportIssueValid = issue => {
              core.summary.addList([
                `:white_check_mark: Assignee: ${ issue.assignee.login }`,
                `:white_check_mark: Milestone: ${ issue.milestone.title } due ${ new Date( issue.milestone.due_on ).toISOString() }`,
                `:white_check_mark: Labels: ${ issue.labels.map( _ => _.name ).join( ", " ) }`,
              ]);
              core.summary.addList([
                `Created at: ${ new Date( issue.created_at ).toISOString() }`,
                `Updated at: ${ issue.updated_at ? new Date( issue.updated_at ).toISOString() : "never" }`,
                `Closed  at: ${ issue.closed_at ? new Date( issue.closed_at ).toISOString() : "never" }`
              ]);
            };

            const alignIssue = async issue => {
              core.info( `#${ issue.number }: Setting assignee...` );
              await github.rest.issues.addAssignees({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                assignees: [ "oliversalzburg" ],
              });

              core.info( `#${ issue.number }: Adding labels...` );
              const labels = [ "needs:triage", "policy-0" ];
              if( issue.title.startsWith( "chore(deps)" ) || issue.title.startsWith( "fix(deps)" ) || issue.title.startsWith( "chore(deps-dev)" ) ) {
                labels.push( "dependencies", "type:housekeeping" );
                if( issue.closed_at ) {
                  labels.push( "status:completed" );
                }
              } else if( issue.title.includes( "Crowdin" ) ) {
                labels.push( "type:housekeeping" );
                if( issue.closed_at ) {
                  labels.push( "status:completed" );
                }
              }
              await github.rest.issues.addLabels({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels,
              });

              const milestone = issue.closed_at ? findMilestone( new Date( issue.closed_at ) ) : currentMilestone;
              core.info( `#${ issue.number }: Adding milestone...` );
              await github.rest.issues.update({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                milestone: milestone.number,
              });
            }

            const validateIssue = issue => {
              let failed = false;
              const warnings = [];
              if( !issue.assignee ) {
                warnings.push( "Missing assignee!" );
                failed = true;
              }

              const closed_at = new Date( issue.closed_at );
              if( !issue.milestone ) {
                if( issue.closed_at ) {
                  const milestone = findMilestone( closed_at );
                  warnings.push( `Missing milestone! Expected: ${ milestone.title }` );
                } else {
                  warnings.push( `Missing milestone! Expected: ${ currentMilestone.title }` );
                }
                failed = true;
              } else {
                const due_on = new Date( issue.milestone.due_on );
                if( due_on < closed_at ) {
                  warnings.push( `Closed after milestone due date! ${ due_on.toISOString() } < ${ closed_at.toISOString() }` )
                  failed = true;
                }
              }

              const labels = issue.labels;
              if( !Array.isArray( labels ) || labels.length < 1 ) {
                warnings.push( "Missing all labels!" );
                failed = true;
              } else {
                if( !labels.some( _ => _.name.startsWith( "status:" ) ) ) {
                  warnings.push( "Missing 'status' label!" );
                  failed = true;
                }
                if( 1 < labels.filter( _ => _.name.startsWith( "status:" ) ).length ) {
                  warnings.push( `Multiple 'status' labels! ${ labels.map( _ => _.name ).concat( ", " ) }` );
                  failed = true;
                }
                if( !labels.some( _ => _.name.startsWith( "type:" ) ) ) {
                  warnings.push( "Missing 'type' label!" );
                  failed = true;
                }
                if( !labels.some( _ => _.name.startsWith( "policy-" ) ) ) {
                  warnings.push( "Missing 'policy' label!" );
                  failed = true;
                }
              }

              return failed ? warnings : false;
            };

            core.summary.addHeading( "Issue Auto-Grooming Report", "2" );
            let issuesChecked = 0;
            let issuesFailed = 0;
            let issuesFixed = 0;
            let stopProcessing = false;
            for await ( const response of github.paginate.iterator(
              github.rest.issues.listForRepo,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "all",
              }
            ) ) {
              for( const issue of response.data ) {
                core.debug( JSON.stringify( issue, undefined, 2 ) );

                core.debug( `#${ issue.number }: Processing ${ issue.state } issue...` );
                ++COUNT_SEEN;
                if( issue.labels.some( _ => _.name === "policy-0" ) ) {
                  core.debug( `#${ issue.number }: Already labeled 'policy-0'. No further processing.` );
                  continue;
                }

                if( issue.state === "closed" ) {
                  core.summary.addHeading( `<a href="${ context.serverUrl }/${ context.repo.owner }/${ context.repo.repo }/issues/${ issue.number }"><s>#${ issue.number }</s></a> ${ issue.title }`, "3" );
                } else {
                  core.summary.addHeading( `<a href="${ context.serverUrl }/${ context.repo.owner }/${ context.repo.repo }/issues/${ issue.number }">#${ issue.number }</a> ${ issue.title }`, "3" );
                }

                const failed = validateIssue( issue );
                ++issuesChecked;
                if( failed ) {
                  ++issuesFailed;
                  core.warning( `#${ issue.number }: Issue is non-compliant.` );

                  reportIssueInvalid( issue, failed );

                  if( issuesFixed < LIMIT_FIX ) {
                    await alignIssue( issue );
                    ++issuesFixed;
                  }

                } else {
                  reportIssueValid( issue );
                }

                if( LIMIT_CHECK <= COUNT_SEEN || LIMIT_FAIL <= issuesFailed ) {
                  core.error( `Bailing out during exploration phase! Seen ${ COUNT_SEEN } issues, checked ${ issuesChecked }, fixed ${ issuesFixed }.` );
                  stopProcessing = true;
                  break;
                }
              }

              if( stopProcessing ) {
                break;
              }
            }

            core.summary.write()
